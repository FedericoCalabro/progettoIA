maxRounds(3).
round(1).
color(blue).
color(orange).
color(red).
color(green).
color(yellow).
node(1,red).
node(2,green).
node(3,red).
node(4,green).
node(5,green).
node(6,green).
node(7,blue).
edge(1,2).
edge(2,1).
edge(2,3).
edge(3,2).
edge(2,4).
edge(4,2).
edge(4,5).
edge(5,4).
edge(3,6).
edge(6,3).
edge(4,7).
edge(7,4).


%init nodeColors
nodeColor(N,C,0) :- node(N,C).

%init rounds
round(T2) | noRound(T2) :- round(T), maxRounds(MAX), T2=T+1, T2<=MAX.

%guess click
click(N,C,T) | nonClick(N,C,T) :- node(N,_), color(C), round(T).

%cannot click a node its same color
:- click(N,C,Present), nodeColor(N,C,Past), Past=Present-1.

%cannot move more than once per round
:- round(T), #count{T,N,C : click(N,C,T)}!=1.

%direct update
nodeColor(N,C,T) :- click(N,C,T).

% undirect update if neighbor is same old color (fix ricorsione a piu livelli)
nodeColor(Near,NewColor,Present) :-
    click(Target,NewColor,Present),
    nodeColor(Target,OldColor,Past),
    Past=Present-1,
    direct(Near,Target,OldColor,Past).

% the rest of nodes are same as before 
nodeColor(Far,OldColor,Present) :-
    click(Target,NewColor,Present),
    nodeColor(Far,OldColor,Past),
    Past=Present-1,
    Target!=Far,
    not direct(Far,Target,OldColor,Past).

%utility -> vicini per colore al round t
direct(X,Y,C,T) :- nodeColor(X,C,T), nodeColor(Y,C,T), edge(X,Y).
direct(X,Z,C,T) :- direct(X,Y,C,T), nodeColor(Z,C,T), edge(Y,Z), X!=Z.


%win condition -> number of colors at last round in nodeColor() must be 0
:- #max{T : round(T)}=R, #count{C : nodeColor(N,C,R)} != 1.

%minimize number of rounds
:~ round(T). [1@1,T]

#show click/3.
% #show nodeColor/3.